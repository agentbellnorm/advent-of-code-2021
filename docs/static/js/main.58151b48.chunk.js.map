{"version":3,"sources":["hooks/useWasm.ts","component/Day.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useWasm","module","setModule","useState","useEffect","then","m","hello","catch","e","console","error","Day","runA","runB","timeA","Date","now","resultA","durA","timeB","resultB","durB","App","className","path","element","one_a","raw","one_b","two_a","two_b","style","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mruBAqBeA,MAjBC,KACd,MAAOC,EAAQC,GAAaC,qBAa5B,OAXAC,qBAAU,KACR,6BACGC,MAAMC,IACLA,EAAEC,QACFL,EAAUI,MAEXE,OAAOC,IACNC,QAAQC,MAAO,+BAA8BF,UAEhD,IAEIR,G,OCiBMW,MA3BH,EAAEC,OAAMC,WAClB,MAAMb,EAASD,IAEf,IAAKC,EACH,OAAO,KAGT,IAAIc,EAAQC,KAAKC,MACjB,MAAMC,EAAUL,EAAKZ,GACrB,IAAIkB,EAAOH,KAAKC,MAAQF,EAEpBK,EAAQJ,KAAKC,MACjB,MAAMI,EAAUP,EAAKb,GACrB,IAAIqB,EAAON,KAAKC,MAAQG,EAExB,OACE,gCACE,mCACA,yCAAYF,KACZ,2CAAcC,EAAd,QACA,mCACA,yCAAYE,KACZ,2CAAcC,EAAd,Y,cCgBSC,MAvCf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,KAAK,KACLC,QACE,cAAC,EAAD,CACEb,KAAOZ,GAAWA,EAAO0B,MAAMA,EAAMC,KACrCd,KAAOb,GAAWA,EAAO4B,MAAMF,EAAMC,SAI3C,cAAC,IAAD,CACEH,KAAK,KACLC,QACE,cAAC,EAAD,CACEb,KAAOZ,GAAWA,EAAO6B,MAAMA,EAAMF,KACrCd,KAAOb,GAAWA,EAAO8B,MAAMD,EAAMF,SAI3C,cAAC,IAAD,CACEH,KAAK,IACLC,QACE,sBAAMM,MAAO,CAAEC,QAAS,QAAxB,SACE,oECrBHC,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,EAAGgC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.58151b48.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport type WasmModule = typeof import(\"../rust/pkg\");\n\nconst useWasm = () => {\n  const [module, setModule] = useState<WasmModule>();\n\n  useEffect(() => {\n    import(\"../rust/pkg\")\n      .then((m) => {\n        m.hello();\n        setModule(m);\n      })\n      .catch((e) => {\n        console.error(`could not load wasm module: ${e}`);\n      });\n  }, []);\n\n  return module;\n};\n\nexport default useWasm;\n","import React from \"react\";\nimport useWasm, { WasmModule } from \"../hooks/useWasm\";\n\ntype Props = {\n  runA: (module: WasmModule) => string;\n  runB: (module: WasmModule) => string;\n}\n\nconst Day = ({runA, runB}: Props) => {\n  const module = useWasm();\n\n  if (!module) {\n    return null;\n  }\n\n  let timeA = Date.now();\n  const resultA = runA(module);\n  let durA = Date.now() - timeA;\n\n  let timeB = Date.now();\n  const resultB = runB(module);\n  let durB = Date.now() - timeB;\n\n  return (\n    <div>\n      <h2>A</h2>\n      <p>Result: {resultA}</p>\n      <p>Duration: {durA}ms</p>\n      <h2>B</h2>\n      <p>Result: {resultB}</p>\n      <p>Duration: {durB}ms</p>\n    </div>\n  );\n};\n\nexport default Day;\n","import React from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Day from \"./component/Day\";\nimport one_a from \"./input/one_a.json\";\nimport two_a from \"./input/two_a.json\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BrowserRouter>\n          <Routes>\n            <Route\n              path=\"01\"\n              element={\n                <Day\n                  runA={(module) => module.one_a(one_a.raw)}\n                  runB={(module) => module.one_b(one_a.raw)}\n                />\n              }\n            />\n            <Route\n              path=\"02\"\n              element={\n                <Day\n                  runA={(module) => module.two_a(two_a.raw)}\n                  runB={(module) => module.two_b(two_a.raw)}\n                />\n              }\n            />\n            <Route\n              path=\"*\"\n              element={\n                <main style={{ padding: \"1rem\" }}>\n                  <p>There's nothing here!</p>\n                </main>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}